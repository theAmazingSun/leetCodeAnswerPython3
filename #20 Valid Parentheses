class Solution:
    def isValid(self, s: str) -> bool:
        """
        :type s: str
        :rtype: bool
        """
        dict = {"(": ")", "[": "]", "{": "}"}
        stack = [] 
        for par in s:
            if par in dict:
                stack.append(par)
            elif not stack or dict[stack.pop()] != par:
                return False
        return not stack


#Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
#An input string is valid if:

#Open brackets must be closed by the same type of brackets.
#Open brackets must be closed in the correct order.
#Note that an empty string is also considered valid.

#Example 1:
#Input: "()"
#Output: true

#Example 2:
#Input: "()[]{}"
#Output: true

#Example 3:
#Input: "(]"
#Output: false

#Example 4:
#Input: "([)]"
#Output: false

#Example 5:
#Input: "{[]}"
#Output: true

class Solution:
    def isValid(self, s: str) -> bool:
        
        #type s: str
        #return type: bool
        
        dict = {'(': ')', '[': ']', '{': '}'}
        check = set(['(', '[', '{'])
        temp = []
        
        for i in s:
            if i in check:
                temp.append(i)
            elif temp and i == dict[temp[-1]]:
                temp.pop()
            else: 
                return False
        return temp == []
        
