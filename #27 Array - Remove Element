Given an array nums and a value val, remove all instances of that value in-place and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:
Given nums = [3,2,2,3], val = 3,
Your function should return length = 2, with the first two elements of nums being 2.
It doesn't matter what you leave beyond the returned length.

Example 2:
Given nums = [0,1,2,2,3,0,4,2], val = 2,
Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.
Note that the order of those five elements can be arbitrary.
It doesn't matter what values are set beyond the returned length.

Clarification:
Confused why the returned value is an integer but your answer is an array?
Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

------------------------------------------------------------------------------------------------------------------------------------
#Approach 1: Two Pointers - when elements to remove are rare
Complexity analysis
Time complexity : O(n). Both ii and nn traverse at most nn steps. In this approach, the number of assignment operations is equal to the number of elements to remove. So it is more efficient if elements to remove are rare.
Space complexity : O(1).

class Solution {
    public int removeElement(int[] nums, int val) {
        int len = nums.length;
        int i = 0;
        while (i < len){
            if (nums[i] == val) {
                nums[i] = nums[len - 1];
                len--;
            }else{
                i++;
            }
        }
        return len;
    }
}

#Approach 2: Two Pointers
Complexity analysis
Time complexity : O(n). Assume the array has a total of nn elements, both ii and jj traverse at most 2n2n steps.
Space complexity : O(1). 

class Solution {
    public int removeElement(int[] nums, int val) {
        int check = 0;
        for (int i = 0; i < nums.length; i++){
            if (nums[i] != val){
                nums[check] = nums[i];
                check++;
            }
        }
        return check;
    }
}

#python
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        """
        :type nums: List[int]
        :rtype: int
        """
        
        count = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[count] = nums[i]
                count += 1
        return count

31 minutes ago	Accepted	0 ms	36.1 MB	java
14 minutes ago	Accepted	0 ms	35.5 MB	java
few seconds ago	Accepted	48 ms	13.4 MB	python3


