class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
        """
        :type nums: List[int]
        :rtype: int
        """
        if max(nums) < 0:
            return max(nums)
        
        localMax, globalMax = 0, 0
        for num in nums:
            localMax = max(0, localMax + num)
            globalMax = max(globalMax, localMax)
        return globalMax
        
        
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

#Python
#For each num calculate the max subarray sum ending with
#that num as either num alone (if previous sum was -ve) or
#num + previous sum (if previous sum was +ve)
#Time: O(n)
#Space: O(1)

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
        """
        :type nums: List[int]
        :rtype: int
        """
        
        overall_max = float('-inf')
        max_ending_here = 0
        
        for num in nums:
            if max_ending_here > 0:
                max_ending_here += num
            else:
                max_ending_here = num
            overall_max = max(overall_max, max_ending_here)
        return overall_max
        
        
